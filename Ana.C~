{
        gROOT->Reset();
        gROOT->ProcessLine(".!date");

        //======================================================== InPut setting

        char * rootfile = "S_run1035.root";
        Int_t Div[2] = {3,1};  //x,y
        Int_t size[2] = {400,400}; //x,y


	//====================================== Load root file
        TFile *f0 = new TFile (rootfile, "read"); 
        TTree *tree = (TTree*)f0->Get("tree");
        printf("=====> /// %15s //// is loaded. Total #Entry: %10d \n", rootfile,  tree->GetEntries());
        gStyle->SetOptStat(1112211);
        
        //======================================================== Browser or Canvas
        TCanvas * cAna = new TCanvas("cAna", "cAna", 200, 0 , size[0]*Div[0], size[1]*Div[1]);
        cAna->Divide(Div[0],Div[1]);
        cAna->cd(1);
        //======================================================== Cut/Gate
        //TCut gateCry = "";
        //TCut gateCry = "s0x*s0x+TMath::Power(s0y-1.8,2)<49";
        //TCut gateCry = "s0x*s0x+TMath::Power(s0y-1.8,2)>49 && s0x*s0x+TMath::Power(s0y-1.8,2)<14.0*14.0";
        //TCut gateCryc = "s0x*s0x+TMath::Power(s0y-1.8,2)>49 && s0x*s0x+TMath::Power(s0y-1.8,2)<196";
        //TCut gateCryc2 = "s0x*s0x+TMath::Power(s0y-1.8,2)>49";
        //TCut gateTofS1 = "32<tofS1 && tofS1<35";
        //TCut gateTofS1 = "32<tofS0DS1 && tofS0DS1<35";
        //TCut gateS0D = "TMath::Finite(s0dx)";
        //TCut gateVertexZ = "TMath::Abs(vertexZ-10)<60";
        //TCut gateVertexZs = "TMath::Abs(vertexZ-10)>60 && TMath::Abs(vertexZ-10)<100";
        //TCut gateVertexZc = "TMath::Abs(vertexZ-160)<60";
        //TCut gateBeamZ = "TMath::Abs(beamZ-10)<30";
        //TCut gateBeamZc = "TMath::Abs(beamZ-160)<30";
        //TCut gateZ = "8.9>pidZ && pidZ>7.2";
        //TCut gateZn = "7.3>pidZ && pidZ>6.4";
        //TCut gateNID = "nyokiID > 6";
        //TCut gateAOQ = "23.5>pidAOQ*8 && pidAOQ*8>18.5";
        
        //------- final gate
        //TCut gateb  = gateCry + gateTofS1 + gateVertexZc + gateOpenAng + gateNID /*+ gateS0D*/ //+ gateZ + gateAOQ; 
        //TCut gate   = gateCry + gateTofS1 + gateVertexZ  + gateOpenAng + gateNID /*+ gateS0D*/ + gateZ + gateAOQ;
        //TCut gateb2 = gateCryc2 + gateTofS1 + gateVertexZ  + gateOpenAng + gateNID /*+ gateS0D*/ + gateZ + gateAOQ;
        
        //TString gate0Str = "";//"r_Crystal<7 X 32<tofS1<35 X |vertexZ-10|<30 X Finite(S0D)";
        //TString gatecStr = "";//"r_Crystal<7 X 32<tofS1<35 X |vertexZ-160|<30 X Finite(S0D) X 8.6>pidZ>7.4";
        //TString gateStr  = "";//"r_Crystal<7 X 32<tofS1<35 X |vertexZ-10|<30 X Finite(S0D) X 8.6>pidZ>7.4";
/*
        Double_t BGscale = 1.0;
/*        
        TCut cut23o = "TMath::Abs(pidAOQ*8-23)<0.5";
        TCut cut22o = "TMath::Abs(pidAOQ*8-22)<0.5";
        TCut cut21o = "TMath::Abs(pidAOQ*8-21)<0.5";
        TCut cut20o = "TMath::Abs(pidAOQ*8-20)<0.5";
        TCut cut19o = "TMath::Abs(pidAOQ*8-19)<0.5";
        TCut cut18o = "TMath::Abs(pidAOQ*8-18)<0.5";

/**/
        TCutG * gate3He_a = new TCutG("cut3He_a", 5);
        gate3He_a->SetVarX("grTOF1");
        gate3He_a->SetVarY("grdE1");
        gate3He_a->SetPoint(0, 183.7, 305.8);
        gate3He_a->SetPoint(1, 188.4, 211.6);
        gate3He_a->SetPoint(2, 214.2, 195.4);
        gate3He_a->SetPoint(3, 225.9, 304.6);
        gate3He_a->SetPoint(4, 208.6, 343.0);
        gate3He_a->SetPoint(5, 183.7, 305.8);

	
        TCutG * gate3He_b = new TCutG("cut3He_b", 5);
        gate3He_b->SetVarX("grTOF1");
        gate3He_b->SetVarY("grdE1");
        gate3He_b->SetPoint(0, 183.7+99, 305.8);
        gate3He_b->SetPoint(1, 188.4+99, 211.6);
        gate3He_b->SetPoint(2, 214.2+99, 195.4);
        gate3He_b->SetPoint(3, 225.9+99, 304.6);
        gate3He_b->SetPoint(4, 208.6+99, 343.0);
        gate3He_b->SetPoint(5, 183.7+99, 305.8);
	/*
        TCutG * gate20o = new TCutG("cut20o", 6);
        gate20o->SetVarX("pidAOQ");
        gate20o->SetVarY("pidZ");
        gate20o->SetPoint(0, 2.42, 8.27);
        gate20o->SetPoint(1, 2.42, 7.65);
        gate20o->SetPoint(2, 2.50, 7.20);
        gate20o->SetPoint(3, 2.56, 7.53);
        gate20o->SetPoint(4, 2.56, 8.24);
        gate20o->SetPoint(5, 2.49, 8.71);
        gate20o->SetPoint(6, 2.42, 8.27);

        TCutG * gate19o = new TCutG("cut19o", 6);
        gate19o->SetVarX("pidAOQ");
        gate19o->SetVarY("pidZ");
        gate19o->SetPoint(0, 2.31, 8.33);
        gate19o->SetPoint(1, 2.31, 7.62);
        gate19o->SetPoint(2, 2.37, 7.31);
        gate19o->SetPoint(3, 2.42, 7.65);
        gate19o->SetPoint(4, 2.42, 8.27);
        gate19o->SetPoint(5, 2.37, 8.64);
        gate19o->SetPoint(6, 2.31, 8.33);

        TCutG * gate18o = new TCutG("cut18o", 6);
        gate18o->SetVarX("pidAOQ");
        gate18o->SetVarY("pidZ");
        gate18o->SetPoint(0, 2.19, 8.35);
        gate18o->SetPoint(1, 2.19, 7.62);
        gate18o->SetPoint(2, 2.27, 7.36);
        gate18o->SetPoint(3, 2.31, 7.64);
        gate18o->SetPoint(4, 2.31, 8.33);
        gate18o->SetPoint(5, 2.26, 8.71);
        gate18o->SetPoint(6, 2.19, 8.35);

        //*///======================================================== analysis
        //tree->Draw

	//tree->Draw("grdE1:grTOF1>>h1(500, 100, 350, 500, 0, 500)", "", "colz");
	//tree->Draw("grdE1:grTOF1>>h1g(500, 100, 350, 500, 0, 500)", "cut3He_a || cut3He_b", "colz");
	tree->Draw("grth*TMath::RadToDeg():grXC>>h2(600,-1000,1000,600,-1.5,1.5)", "cut3He_a || cut3He_b", "colz");
	tree->Draw("grXC>>h2px(1200,-600,600)", "cut3He_a || cut3He_b", "colz");

        //h2->ProjectionX("h2px")->Draw();
        
        TF1* fit = new TF1("fit", "gaus(0)+gaus(3)+gaus(6)", -600, 600);
        Double_t para[9]={1100, -20, 50, 150, 110, 120, 340, -2, 340};
        fit->SetParameters(para);
        //fit->FixParameter(1, 0);
        fit->SetLineColor(1);
        fit->SetLineStyle(1);
        fit->SetLineWidth(2);
        h2px->Fit("fit", "R");
        printf("reduced chi-squared = %f \n", fit->GetChisquare()/fit->GetNDF());

        fit->GetParameters(para);
        TF1* g1 = new TF1("g1", "gaus(0)", -600, 600); g1->SetParameters(&para[0]); g1->SetLineColor(4); g1->Draw("same");
        TF1* g2 = new TF1("g2", "gaus(0)", -600, 600); g2->SetParameters(&para[3]); g2->SetLineColor(3); g2->Draw("same");
        TF1* g3 = new TF1("g3", "gaus(0)", -600, 600); g3->SetParameters(&para[6]); g3->SetLineColor(2); g3->Draw("same");

        TH1F* k1 = new TH1F("k1", "k1", 1200, -600, 600);  
        
        for( Int_t i = 1; i <=1200; i++){
           double x = h2px->GetBinCenter(i); 
           k1->Fill(x, g2->Eval(x)+g3->Eval(x));
        }
        
        cAna->cd(2);
        k1->Draw();
        
        cAna->cd(3);
        TH1F* k2 = new TH1F(*h2px - *k1);
        k2->Draw();
        
          

	/*
        tree->Draw("Ex>>oAll( 50, -140, 180)", gate )  ; oAll->SetTitle(gateStr);
        tree->Draw("Ex>>oAllc(50, -140, 180)", gatec ) ; oAllc->SetTitle(gatecStr); oAllc->SetLineColor(2);
        
        oAllc->Scale(BGscale); TH1F* mAll = new TH1F(*oAll - *oAllc); mAll->SetName("mAll");mAll->SetTitle("23F(p,2p)22O*"); mAll->SetLineColor(1); mAll->SetLineWidth(2);

        m21->SetXTitle("Ex [MeV]"); m21->SetYTitle("count / 2 MeV");

        THStack *mS = new THStack("mS", "Stack of Ex for 22O - 18O");
        mS->Add(m22);
        mS->Add(m21);
        mS->Add(m20);
        //mS->Add(m19);
        //mS->Add(m18);
        
        leg = new TLegend(0.1,0.6,0.3,0.9);
        //leg->SetHeader("");
        leg->SetTextSize(0.05);
        leg->AddEntry(fit22o, "(^{23}F,^{22}O)", "l");
        leg->AddEntry(fit21o, "(^{23}F,^{21}O)", "l");
        leg->AddEntry(fit20o, "(^{23}F,^{20}O)", "l"); // latex OK!
        leg->Draw();
        

/*++++++++++++++++++++++++++++++++++++++++++++++ Momentum*/
	/*	
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p22(  9, -300, 300)", gate  + cut22o +"TMath::Abs(Ex)<20") ; //o22->SetTitle(gateStr + " X 22O");
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p21(  18, -300, 300)", gate  + cut21o +"TMath::Abs(Ex-8)<20") ; //o21->SetTitle(gateStr + " X 21O");
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p20(  18, -300, 300)", gate  + cut20o +"TMath::Abs(Ex-15)<20") ; //o20->SetTitle(gateStr + " X 20O");
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p22c( 9, -300, 300)", gatec + cut22o +"TMath::Abs(Ex)<20") ; //o22c->SetTitle(gateStr + " X 22O");
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p21c( 18, -300, 300)", gatec + cut21o +"TMath::Abs(Ex-8)<20") ; //o21c->SetTitle(gateStr + " X 21O");
        //tree->Draw("(0.002*kE + kp)/sqrt(1-0.002*0.002)>>p20c( 18, -300, 300)", gatec + cut20o +"TMath::Abs(Ex-15)<20") ; //o20c->SetTitle(gateStr + " X 20O");

        tree->Draw("kMomt>>p22(  40, 0, 400)", gate  + "cut22o" +"TMath::Abs(Ex)<20") ; //o22->SetTitle(gateStr + " X 22O");
        tree->Draw("kMomt>>p21(  40, 0, 400)", gate  + "cut21o" +"TMath::Abs(Ex-10)<10") ; //o21->SetTitle(gateStr + " X 21O");
        tree->Draw("kMomt>>p20(  40, 0, 400)", gate  + "cut20o" +"TMath::Abs(Ex-20)<20") ; //o20->SetTitle(gateStr + " X 20O");
        tree->Draw("kMomt>>p22c( 40, 0, 400)", gatec + "cut22o" +"TMath::Abs(Ex)<20") ; //o22c->SetTitle(gateStr + " X 22O");
        tree->Draw("kMomt>>p21c( 40, 0, 400)", gatec + "cut21o" +"TMath::Abs(Ex-10)<10") ; //o21c->SetTitle(gateStr + " X 21O");
        tree->Draw("kMomt>>p20c( 40, 0, 400)", gatec + "cut20o" +"TMath::Abs(Ex-20)<20") ; //o20c->SetTitle(gateStr + " X 20O");

        p22c->Scale(BGscale); TH1F* q22 = new TH1F(*p22 - *p22c); q22->SetLineColor(1); q22->SetName("q22"); q22->SetTitle("23F(p,2p)22Ogs");
        p21c->Scale(BGscale); TH1F* q21 = new TH1F(*p21 - *p21c); q21->SetLineColor(1); q21->SetName("q21"); q21->SetTitle("23F(p,2p)22O*->21O*+n, 6.86");
        p20c->Scale(BGscale); TH1F* q20 = new TH1F(*p20 - *p20c); q20->SetLineColor(1); q20->SetName("q20"); q20->SetTitle("23F(p,2p)22O*->20O*+2n, 10.65");

        q22->SetXTitle("k [MeV/c]"); q22->SetYTitle("count / 10 MeV"); q22->SetTitle("Ex = 0 MeV");
        q21->SetXTitle("k [MeV/c]"); q21->SetYTitle("count / 10 MeV"); q21->SetTitle("Ex = 10 MeV,");
        q20->SetXTitle("k [MeV/c]"); q20->SetYTitle("count / 10 MeV"); q20->SetTitle("Ex = 20 MeV");
        
        Ex00->Draw("k>>hk0a(40, 0, 400)", "xsec1d5", "E"); hk0a->SetLineColor(2); 
        Ex00->Draw("k>>hk0b(40, 0, 400)", "xsec1p1", "E"); hk0b->SetLineColor(3); 
        Ex00->Draw("k>>hk0c(40, 0, 400)", "xsec1p3", "E"); hk0c->SetLineColor(4); 
        Ex00->Draw("k>>hk0d(40, 0, 400)", "xsec2s1", "E"); hk0d->SetLineColor(6);
        Ex10->Draw("k>>hk1a(40, 0, 400)", "xsec1d5", "E"); hk1a->SetLineColor(2); 
        Ex10->Draw("k>>hk1b(40, 0, 400)", "xsec1p1", "E"); hk1b->SetLineColor(3); 
        Ex10->Draw("k>>hk1c(40, 0, 400)", "xsec1p3", "E"); hk1c->SetLineColor(4); 
        Ex10->Draw("k>>hk1d(40, 0, 400)", "xsec2s1", "E"); hk1d->SetLineColor(6); 
        Ex20->Draw("k>>hk2a(40, 0, 400)", "xsec1d5", "E"); hk2a->SetLineColor(2); 
        Ex20->Draw("k>>hk2b(40, 0, 400)", "xsec1p1", "E"); hk2b->SetLineColor(3); 
        Ex20->Draw("k>>hk2c(40, 0, 400)", "xsec1p3", "E"); hk2c->SetLineColor(4); 
        Ex20->Draw("k>>hk2d(40, 0, 400)", "xsec2s1", "E"); hk2d->SetLineColor(6); 
        
        Double_t temp = hk0a->GetMaximum(); 
        hk0a->Scale(q22->GetMaximum()/temp);
        hk0b->Scale(q22->GetMaximum()/temp);
        hk0c->Scale(q22->GetMaximum()/temp);
        hk0d->Scale(q22->GetMaximum()/temp);
        Double_t temp = hk1b->GetMaximum(); 
        hk1a->Scale(q21->GetMaximum()/temp);
        hk1b->Scale(q21->GetMaximum()/temp);
        hk1c->Scale(q21->GetMaximum()/temp);
        hk1d->Scale(q21->GetMaximum()/temp);
        Double_t temp = hk2c->GetMaximum(); 
        hk2a->Scale(q20->GetMaximum()/temp);  
        hk2b->Scale(q20->GetMaximum()/temp);  
        hk2c->Scale(q20->GetMaximum()/temp);
        hk2d->Scale(q20->GetMaximum()/temp);
        
        q22->SetMaximum(hk0a->GetMaximum()*1.1);
        q21->SetMaximum(hk1a->GetMaximum()*1.1);
        q20->SetMaximum(hk2a->GetMaximum()*1.1);
        
        
        q22->Draw();hk0a->Draw("same");hk0b->Draw("same");hk0c->Draw("same"); hk0d->Draw("same");
//        q21->Draw();hk1a->Draw("same");hk1b->Draw("same");hk1c->Draw("same"); hk1d->Draw("same");

/*++++++++++++++++++++++++++++++++++++++++++++++ Asymmetry*//*
        TCutG* cutAsy = gate20o;
        TString plotTitle = "(23F,20O)"; 
        TCut energy = "abs(Ex-18)<10";
                
        cutAsy->SetName("cutAsy");

        tree->Draw("theta1>>h2aL(5,20,70)", gate + "cutAsy" + energy + "runNum<=36", "colz");
        tree->Draw("theta2>>h2aR(5,20,70)", gate + "cutAsy" + energy + "runNum<=36", "colz");
        
        tree->Draw("theta1>>h2aLg(5,20,70)", gatec + "cutAsy" + energy + "runNum<=36", "colz");
        tree->Draw("theta2>>h2aRg(5,20,70)", gatec + "cutAsy" + energy + "runNum<=36", "colz");
        
        TH1F* h2aLs = new TH1F(*h2aL - *h2aLg); h2aLs->SetName("h2aLs"); h2aLs->SetLineColor(4);
        TH1F* h2aRs = new TH1F(*h2aR - *h2aRg); h2aRs->SetName("h2aRs"); h2aRs->SetLineColor(2);
        
        h2aLs->SetXTitle("theta [deg]"); h2aLs->SetYTitle("count / 10 deg"); h2aLs->SetTitle(plotTitle + "Spin up");
        h2aRs->SetXTitle("theta [deg]"); h2aRs->SetYTitle("count / 10 deg"); h2aRs->SetTitle(plotTitle + "Spin up");
        
        cAna->cd(1);
        h2aRs->Draw("");
        h2aLs->Draw("same");
        
        
        tree->Draw("theta1>>h2bL(5,20,70)", gate + "cutAsy" + energy + "runNum>36", "colz");
        tree->Draw("theta2>>h2bR(5,20,70)", gate + "cutAsy" + energy + "runNum>36", "colz");
        
        tree->Draw("theta1>>h2bLg(5,20,70)", gatec + "cutAsy" + energy + "runNum>36", "colz");
        tree->Draw("theta2>>h2bRg(5,20,70)", gatec + "cutAsy" + energy + "runNum>36", "colz");
        
        TH1F* h2bLs = new TH1F(*h2bL - *h2bLg); h2bLs->SetName("h2bLs"); h2bLs->SetLineColor(4);
        TH1F* h2bRs = new TH1F(*h2bR - *h2bRg); h2bRs->SetName("h2bRs"); h2bRs->SetLineColor(2);
        
        h2bLs->SetXTitle("theta [deg]"); h2bLs->SetYTitle("count / 10 deg"); h2bLs->SetTitle(plotTitle + "Spin down");
        h2bRs->SetXTitle("theta [deg]"); h2bRs->SetYTitle("count / 10 deg"); h2bRs->SetTitle(plotTitle + "Spin down");
        
        Ex10->Draw("theta1>>g1(5,20,70)", "xsec1p1*(1+asym1p1)","");
        Ex10->Draw("theta2>>g2(5,20,70)", "xsec1p1*(1+asym1p1)","");
        
        cAna->cd(2);
        h2bLs->Draw("E"); h2bLs->Draw("same");
        h2bRs->Draw("E same"); h2bRs->Draw("same");
        
        cAna->cd(1);
        h2aLs->Draw("E"); h2aLs->Draw("same");
        h2aRs->Draw("E same"); h2aRs->Draw("same");
        
        //--------------------calculate AyP
        Int_t nBin = h2aLs->GetNbinsX();
        
        Double_t yLu[nBin], yRu[nBin], yLd[nBin], yRd[nBin];
        Double_t xBin[nBin], AyP[nBin];
        
        for ( Int_t l = 1; l <= nBin; l++){
                Int_t i = l-1;
                xBin[i] = h2aLs->GetBinCenter(l);
                yLu[i]=h2aLs->GetBinContent(l);
                yRu[i]=h2aRs->GetBinContent(l);
                yLd[i]=h2bLs->GetBinContent(l);
                yRd[i]=h2bRs->GetBinContent(l);
                
                Double_t tYL = g1->GetBinContent(l);
                Double_t tYR = g2->GetBinContent(l);
                
                Double_t tAy = (tYL-tYR)/(tYL+tYR);
                
                Double_t YL = TMath::Sqrt(yLu[i]*yRd[i]);
                Double_t YR = TMath::Sqrt(yRu[i]*yLd[i]);
                
                Double_t dYL = TMath::Sqrt(yLu[i] + yRd[i])/2;
                Double_t dYR = TMath::Sqrt(yLd[i] + yRu[i])/2;
                
                AyP[i] = (YL - YR)/(YL + YR);
                
                Double_t dAyP = TMath::Sqrt(YL*YL*dYR*dYR + YR*YR*dYL*dYL)/TMath::Power(YL + YR,2);
                
                Double_t Ay = AyP[i]/0.3;
                Double_t dAy = Ay * TMath::Sqrt( TMath::Power(dAyP/AyP[i],2) + TMath::Power(dAyP/AyP[i],2));
                
                printf("x:%4.0f, yLu:%4.0f, yRu:%4.0f, yLd:%4.0f, yRd:%4.0f, AyP:%6.4f, dAyp:%10.6f, Ay:%10.6f, dAy:%10.6f, tAy:%10.6f\n", xBin[i], yLu[i], yRu[i], yLd[i], yRd[i], AyP[i], dAyP, Ay, dAy, tAy); 
        }
        
                
        

        
/***********/
}
